name: Events Demo 1
on:
  pull_request:
    types: [opened, edited, synchronize]
    branches:
      - main
      - develop
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "CHANGELOG.md"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run tests
        continue-on-error: true
        id: run-tests
        run: npm test
      # - name: Upload test results
      #   if: failure() && steps.run-tests.outcome == 'failure'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-report
      #     path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build project
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: |
            dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
      - name: Output contents
        run: |
          echo "Contents of dist:"
          ls
      - name: Ouput filename
        run: |
          echo "Script file: ${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying the project..."
  report:
    needs: [lint, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ github }}"
